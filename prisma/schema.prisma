generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @unique
  Cpu       Cpu[]
  Gpu       Gpu[]
  // Display     Display[]
  // Cooler      Cooler[]
  // Hdd         Hdd[]
  // Memory      Memory[]
  // MotherBoard MotherBoard[]
  // PcCase      PcCase[]
  // Power       Power[]
  // Ssd         Ssd[]
  Memory    Memory[]
}

model Cpu {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  name        String
  brand       String
  price       Float?
  releaseDate DateTime?
  generation  String?
  frequency   String?
  socket      String?
  image       String?
  cache       String?
  categoryId  Int
  url         String?   @db.VarChar(2048)
  Category    Category  @relation(fields: [categoryId], references: [id])
}

model Gpu {
  id           Int       @id @default(autoincrement())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  name         String
  brand        String
  price        Float?
  releaseDate  DateTime?
  chip         String?
  interface    String?
  displayInput String?
  memory       String?
  wattage      String?
  image        String?
  url          String?   @db.VarChar(2048)
  categoryId   Int
  Category     Category  @relation(fields: [categoryId], references: [id])
}

model Memory {
  id              Int       @id @default(autoincrement())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  name            String
  brand           String
  price           Float?
  releaseDate     DateTime?
  capacity        String?
  count           String?
  memoryStandard  String?
  memoryInterface String?
  moduleStandard  String?
  image           String?
  url             String?   @db.VarChar(2048)
  categoryId      Int
  Category        Category  @relation(fields: [categoryId], references: [id])
}

// model Cooler {
//   id           Int         @id @default(autoincrement())
//   createdAt    DateTime    @default(now())
//   updatedAt    DateTime
//   name         String
//   brand        String
//   image        String?
//   url          String?     @db.VarChar(2048)
//   price        String?
//   categoryId   Int
//   airFlow      String
//   coolingType  String
//   fanCount     Int
//   size         String
//   socket       String
//   supportedTdp Int
//   Category     Category    @relation(fields: [categoryId], references: [id])
//   PartsList    PartsList[]
// }

// model Display {
//   id         Int         @id @default(autoincrement())
//   createdAt  DateTime    @default(now())
//   updatedAt  DateTime
//   name       String
//   brand      String
//   size       String
//   contrast   String?
//   image      String?
//   categoryId Int
//   price      String?
//   resolution String
//   speed      String
//   type       String
//   url        String?     @db.VarChar(2048)
//   Category   Category    @relation(fields: [categoryId], references: [id])
//   PartsList  PartsList[]
// }

// model Hdd {
//   id         Int         @id @default(autoincrement())
//   createdAt  DateTime    @default(now())
//   updatedAt  DateTime
//   name       String
//   brand      String
//   capacity   String
//   speed      String
//   image      String?
//   categoryId Int
//   price      String?
//   url        String?     @db.VarChar(2048)
//   interface  String
//   size       String
//   Category   Category    @relation(fields: [categoryId], references: [id])
//   PartsList  PartsList[]
// }

// model MotherBoard {
//   id          Int         @id @default(autoincrement())
//   createdAt   DateTime    @default(now())
//   updatedAt   DateTime
//   name        String
//   brand       String
//   socket      String
//   image       String?
//   categoryId  Int
//   price       String?
//   url         String?     @db.VarChar(2048)
//   formFactor  String
//   memoryType  String
//   pciSlots    String?
//   chip        String
//   maxMemory   Int
//   memorySlots Int
//   Category    Category    @relation(fields: [categoryId], references: [id])
//   PartsList   PartsList[]
// }

// model PcCase {
//   id         Int         @id @default(autoincrement())
//   createdAt  DateTime    @default(now())
//   updatedAt  DateTime
//   name       String
//   brand      String
//   weight     String
//   image      String?
//   categoryId Int
//   price      String?
//   url        String?     @db.VarChar(2048)
//   size       String
//   formFactor String
//   PartsList  PartsList[]
//   Category   Category    @relation(fields: [categoryId], references: [id])
// }

// model Power {
//   id            Int         @id @default(autoincrement())
//   createdAt     DateTime    @default(now())
//   updatedAt     DateTime
//   name          String
//   brand         String
//   capacity      String
//   image         String?
//   categoryId    Int
//   price         String?
//   url           String?     @db.VarChar(2048)
//   certification String
//   type          String
//   PartsList     PartsList[]
//   Category      Category    @relation(fields: [categoryId], references: [id])
// }

// model Ssd {
//   id         Int         @id @default(autoincrement())
//   createdAt  DateTime    @default(now())
//   updatedAt  DateTime
//   name       String
//   brand      String
//   capacity   String
//   size       String
//   interface  String
//   image      String?
//   categoryId Int
//   price      String?
//   url        String?     @db.VarChar(2048)
//   speed      String
//   PartsList  PartsList[]
//   Category   Category    @relation(fields: [categoryId], references: [id])
// }

// model User {
//   id             Int         @id @default(autoincrement())
//   createdAt      DateTime    @default(now())
//   updatedAt      DateTime
//   email          String      @unique
//   name           String      @unique
//   hashedPassword String
//   PartsList      PartsList[]
// }
