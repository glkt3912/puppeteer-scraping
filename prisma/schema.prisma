generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id          Int           @id @default(autoincrement())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  name        String        @unique
  Cpu         Cpu[]
  Gpu         Gpu[]
  Memory      Memory[]
  Cooler      Cooler[]
  Display     Display[]
  Hdd         Hdd[]
  Motherboard Motherboard[]
  PcCase      PcCase[]
  Power       Power[]
  Ssd         Ssd[]
}

model Cpu {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  name        String
  brand       String
  price       Float?
  releaseDate DateTime?
  generation  String?
  frequency   String?
  socket      String?
  image       String?
  cache       String?
  categoryId  Int
  url         String?   @db.VarChar(2048)
  Category    Category  @relation(fields: [categoryId], references: [id])
}

model Gpu {
  id           Int       @id @default(autoincrement())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  name         String
  brand        String
  price        Float?
  releaseDate  DateTime?
  chip         String?
  interface    String?
  displayInput String?
  memory       String?
  wattage      String?
  image        String?
  url          String?   @db.VarChar(2048)
  categoryId   Int
  Category     Category  @relation(fields: [categoryId], references: [id])
}

model Memory {
  id              Int       @id @default(autoincrement())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  name            String
  brand           String
  price           Float?
  releaseDate     DateTime?
  capacity        String?
  count           String?
  memoryStandard  String?
  memoryInterface String?
  moduleStandard  String?
  image           String?
  url             String?   @db.VarChar(2048)
  categoryId      Int
  Category        Category  @relation(fields: [categoryId], references: [id])
}

model Cooler {
  id            Int       @id @default(autoincrement())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  name          String
  brand         String
  price         Float?
  releaseDate   DateTime?
  type          String?
  size          String?
  tdp           String?
  noiseMaxLevel String?
  image         String?
  url           String?   @db.VarChar(2048)
  categoryId    Int
  Category      Category  @relation(fields: [categoryId], references: [id])
}

model Display {
  id           Int       @id @default(autoincrement())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  name         String
  brand        String
  price        Float?
  releaseDate  DateTime?
  size         String?
  displayType  String?
  displayInput String?
  resolution   String?
  panelType    String?
  refreshRate  String?
  image        String?
  url          String?   @db.VarChar(2048)
  categoryId   Int
  Category     Category  @relation(fields: [categoryId], references: [id])
}

model Hdd {
  id                    Int       @id @default(autoincrement())
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  name                  String
  brand                 String
  price                 Float?
  releaseDate           DateTime?
  capacity              String?
  rpm                   String?
  interfaceSpec         String?
  magneticRecordingType String?
  image                 String?
  url                   String?   @db.VarChar(2048)
  categoryId            Int
  Category              Category  @relation(fields: [categoryId], references: [id])
}

model Motherboard {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  name        String
  brand       String
  price       Float?
  releaseDate DateTime?
  socket      String?
  formFactor  String?
  chipset     String?
  memoryType  String?
  image       String?
  url         String?   @db.VarChar(2048)
  categoryId  Int
  Category    Category  @relation(fields: [categoryId], references: [id])
}

model PcCase {
  id                      Int       @id @default(autoincrement())
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  name                    String
  brand                   String
  price                   Float?
  releaseDate             DateTime?
  size                    String?
  formFactor              String?
  mountingBracket35       String?
  mountingBracket35shadow String?
  mountingBracket525      String?
  image                   String?
  url                     String?   @db.VarChar(2048)
  categoryId              Int
  Category                Category  @relation(fields: [categoryId], references: [id])
}

model Power {
  id           Int       @id @default(autoincrement())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  name         String
  brand        String
  price        Float?
  releaseDate  DateTime?
  capacity     String?
  formFactor   String?
  certfication String?
  size         String?
  weight       String?
  image        String?
  url          String?   @db.VarChar(2048)
  categoryId   Int
  Category     Category  @relation(fields: [categoryId], references: [id])
}

model Ssd {
  id            Int       @id @default(autoincrement())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  name          String
  brand         String
  price         Float?
  releaseDate   DateTime?
  capacity      String?
  standard      String?
  interfaceSpec String?
  type          String?
  readSpeed     String?
  writeSpeed    String?
  image         String?
  url           String?   @db.VarChar(2048)
  categoryId    Int
  Category      Category  @relation(fields: [categoryId], references: [id])
}

// model User {
//   id             Int         @id @default(autoincrement())
//   createdAt      DateTime    @default(now())
//   updatedAt      DateTime
//   email          String      @unique
//   name           String      @unique
//   hashedPassword String
//   PartsList      PartsList[]
// }
